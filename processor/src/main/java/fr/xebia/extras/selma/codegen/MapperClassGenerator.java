/*
 * Copyright 2013  SÃ©ven Le Mesle
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package fr.xebia.extras.selma.codegen;

import com.squareup.javawriter.JavaWriter;
import fr.xebia.extras.selma.DefaultFactory;
import fr.xebia.extras.selma.Factory;
import fr.xebia.extras.selma.Mapper;
import fr.xebia.extras.selma.SelmaConstants;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.*;
import javax.lang.model.type.TypeKind;
import javax.lang.model.util.ElementFilter;
import javax.tools.JavaFileObject;
import java.io.IOException;
import java.util.*;

import static javax.lang.model.element.Modifier.FINAL;
import static javax.lang.model.element.Modifier.PRIVATE;
import static javax.lang.model.element.Modifier.PUBLIC;

/**
 *
 */
public class MapperClassGenerator {


    public static final String GENERATED_BY_XMAPPER = "GENERATED BY XMAPPER";
    public static final Set<String> registry = new HashSet<String>();
    private final Collection<ExecutableElement> mapperMethods;
    private final String origClasse;
    private final ProcessingEnvironment processingEnv;
    private final MapperGeneratorContext context;
    private final MappingRegistry mappingRegistry;
    private final TypeElement element;
    private final SourceConfiguration configuration;

    public MapperClassGenerator(String classe, Collection<ExecutableElement> executableElements, ProcessingEnvironment processingEnvironment) {
        this.origClasse = classe;
        this.mapperMethods = executableElements;
        this.processingEnv = processingEnvironment;
        context = new MapperGeneratorContext(processingEnv, null);
        mappingRegistry = new MappingRegistry(context);
        element = context.elements.getTypeElement(classe);

        AnnotationWrapper annotationWrapper = AnnotationWrapper.buildFor(context, element, Mapper.class);
        configuration = SourceConfiguration.buildFrom(annotationWrapper);
        if (registry.contains(origClasse))
            return;

        // Here we collect custom mappers
        collectCustom(annotationWrapper);
        validateTypes();
    }

    private void collectCustom(AnnotationWrapper annotationWrapper) {


        if (annotationWrapper.getAsStrings("withMapper").size() > 0) {
            int mappingMethodCount = 0;

            for (String customMapper : annotationWrapper.getAsStrings("withMapper")) {

                TypeElement element = context.elements.getTypeElement(customMapper.replace(".class", ""));

                final List<ExecutableElement> methods = ElementFilter.methodsIn(element.getEnclosedElements());

                for (ExecutableElement method : methods) {
                        MethodWrapper methodWrapper = new MethodWrapper(method, context);
                        if (isValidCustomMapping(methodWrapper)){
                            context.info(method, "Found an elligible custom mapping method ...");
                            mappingRegistry.pushCustomMapper(customMapper.replace(".class", ""), methodWrapper);
                            mappingMethodCount++;
                        }
                }

                if (mappingMethodCount == 0) {
                    context.error(element, "No valid mapping method found in custom selma class %s\\n A custom mapping method is public static returns a type not void and takes two parameter (bean to convert and factory for instantiation).", customMapper);
                }
            }
        }

    }

    private boolean isValidCustomMapping(MethodWrapper methodWrapper) {
        boolean res = true;

        if (MapperProcessor.exclusions.contains( methodWrapper.getSimpleName())){
             // We skip excluded methods
            return false;
        }

        if (!methodWrapper.element().getModifiers().contains(javax.lang.model.element.Modifier.STATIC) || !methodWrapper.element().getModifiers().contains(javax.lang.model.element.Modifier.PUBLIC)) {
            context.warn(methodWrapper.element(), "Custom mapping method should be *public static* (Fix modifiers of the method) on %s", methodWrapper.getSimpleName());
            res = false;
        }

        if(!methodWrapper.hasReturnType()){
            context.warn(methodWrapper.element(), "Custom mapping method can not be void (Add the targeted return type) on %s", methodWrapper.getSimpleName());
            res = false;
        }

        if(!methodWrapper.hasTwoParameter()){
            context.warn(methodWrapper.element(), "Custom mapping method should take two parameters but there is %s on %s", methodWrapper.parameterCount(), methodWrapper.getSimpleName());
            res = false;
        } else if(!methodWrapper.secondParameterIsFactory()){
            context.warn(methodWrapper.element(), "Custom mapping method second parameter should be of type %s on %s", Factory.class.getName(), methodWrapper.getSimpleName());
            res = false;
        }

        return res;
    }

    private void validateTypes() {

        for (ExecutableElement mapperMethod : mapperMethods) {

            MethodWrapper methodWrapper = new MethodWrapper(mapperMethod, context);
            InOutType inOutType = methodWrapper.inOutType();
            if (inOutType.differs()) {
                MappingBuilder builder = MappingBuilder.getBuilderFor(context, inOutType);

                if ((inOutType.in().getKind() != TypeKind.DECLARED || inOutType.out().getKind() != TypeKind.DECLARED) && builder == null) {
                    context.error(mapperMethod, "In type : %s and Out type : %s differs and this kind of conversion is not supported here", inOutType.in(), inOutType.out());
                }
            }

        }
    }

    public void build() throws IOException {

        if (registry.contains(origClasse))
            return;

        registry.add(origClasse);

        boolean firstMethod = true;
        JavaWriter writer = null;
        JavaFileObject sourceFile = null;

        for (ExecutableElement mapperMethod : mapperMethods) {

            if (firstMethod) {
                String packageName = getPackage(mapperMethod).getQualifiedName().toString();
                TypeElement type = processingEnv.getElementUtils().getTypeElement(origClasse);
                String strippedTypeName = strippedTypeName(type.getQualifiedName().toString(), packageName);
                String adapterName = new StringBuilder(type.toString()).append(SelmaConstants.MAPPER_CLASS_SUFFIX).toString();

                sourceFile = processingEnv.getFiler().createSourceFile(adapterName, type);
                writer = new JavaWriter(sourceFile.openWriter());

                writer.emitSingleLineComment(GENERATED_BY_XMAPPER);
                writer.emitPackage(packageName);
                writer.emitEmptyLine();
                writer.beginType(adapterName, "class", EnumSet.of(PUBLIC, FINAL), null, strippedTypeName);
                writer.emitEmptyLine();
                firstMethod = false;

                buildConstructors(writer, adapterName);
            }
            // Write mapping method
            MapperMethodGenerator.create(writer, mapperMethod, context, mappingRegistry, configuration).build();

            writer.emitEmptyLine();

        }
        writer.endType();
        writer.close();
    }

    private void buildConstructors(JavaWriter writer, String adapterName) throws IOException {

        writer.emitJavadoc("Factory used for bean instantiation");
        writer.emitField(Factory.class.getCanonicalName(), "factory", EnumSet.of(PRIVATE, FINAL));

         // First build default constructor
        writer.emitEmptyLine();
        writer.emitJavadoc("Default constructor using a new DefaultFactory for bean instantiation");
        writer.beginMethod(null,  adapterName, EnumSet.of(PUBLIC));
        writer.emitStatement("this.factory = new %s()", DefaultFactory.class.getCanonicalName());
        writer.endMethod();

         // Then build constructor with Factory parameter
        writer.emitEmptyLine();
        writer.emitJavadoc("Constructor using a given Factory for bean instantiation");
        writer.beginMethod(null, adapterName, EnumSet.of(PUBLIC), Factory.class.getCanonicalName(), "_factory");
        writer.beginControlFlow("if (_factory == null)");
        writer.emitStatement("throw new IllegalArgumentException (\"Factory can not be null\")");
        writer.endControlFlow();
        writer.emitStatement("this.factory = _factory");
        writer.endMethod();

        writer.emitEmptyLine();
        writer.emitJavadoc("New instance private method");
        writer.beginMethod("<T> T", "newB", EnumSet.of(PRIVATE, FINAL), "Class<T>", "aClass");
        writer.emitStatement("return factory.newInstance(aClass)");
        writer.endMethod();

        writer.emitEmptyLine();
    }

    public PackageElement getPackage(Element type) {
        while (type.getKind() != ElementKind.PACKAGE) {
            type = type.getEnclosingElement();
        }
        return (PackageElement) type;
    }

    public String strippedTypeName(String type, String packageName) {
        return type.substring(packageName.isEmpty() ? 0 : packageName.length() + 1);
    }

}
